{"version":3,"sources":["components/Statistics/Statistics.js","components/FeedbackOptions/FeedbackOptions.js","components/Section/Section.js","components/Notification/Notification.js","App.js","index.js"],"names":["Statistics","good","neutral","bad","total","positivePercentage","isNaN","FeedbackOptions","options","onLeaveFeedback","map","name","key","onClick","Section","title","children","Notification","message","initialState","App","state","addFeedback","e","persist","setState","prevState","target","Object","values","this","reduce","acc","stat","Math","round","countTotalFeedback","keys","countPositiveFeedbackPercentage","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uPAEaA,EAAa,SAAC,GAMpB,IALLC,EAKI,EALJA,KACAC,EAII,EAJJA,QACAC,EAGI,EAHJA,IACAC,EAEI,EAFJA,MACAC,EACI,EADJA,mBAEA,OACE,oCACE,oCAAUJ,GACV,uCAAaC,GACb,mCAASC,GACT,qCAAWC,GACX,iDACsBE,MAAMD,GAAsB,EAAIA,EADtD,OCbOE,EAAkB,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,gBAAZ,OAC7BD,EAAQE,KAAI,SAAAC,GAAI,OACd,4BAAQC,IAAKD,EAAMA,KAAMA,EAAME,QAASJ,GACrCE,OCHMG,EAAU,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAC/B,OACE,oCACE,4BAAKD,GACJC,ICJMC,EAAe,SAAAC,GAAO,OAAI,4BAAKA,EAAQA,UCI9CC,EAAe,CACnBlB,KAAM,EACNC,QAAS,EACTC,IAAK,GAGciB,E,4MACnBC,M,eAAaF,G,EACbG,YAAc,SAAAC,GACZA,EAAEC,UACF,EAAKC,UAAS,SAAAC,GACZ,OAAO,eAAGH,EAAEI,OAAOhB,KAAOe,EAAUH,EAAEI,OAAOhB,MAAQ,O,mEAKvD,OAAOiB,OAAOC,OAAOC,KAAKT,OAAOU,QAAO,SAACC,EAAKC,GAE5C,OADAD,GAAOC,IAEN,K,wDAIH,OAAOC,KAAKC,MAAOL,KAAKT,MAAMpB,KAAO6B,KAAKM,qBAAwB,O,+BAIlE,OACE,oCACE,kBAAC,EAAD,CAASrB,MAAM,yBACb,kBAAC,EAAD,CACEP,QAASoB,OAAOS,KAAKP,KAAKT,OAC1BZ,gBAAiBqB,KAAKR,eAG1B,kBAAC,EAAD,CAASP,MAAM,cACZe,KAAKM,qBAAuB,EAC3B,kBAAC,EAAD,CACEnC,KAAM6B,KAAKT,MAAMpB,KACjBC,QAAS4B,KAAKT,MAAMnB,QACpBC,IAAK2B,KAAKT,MAAMlB,IAChBC,MAAO0B,KAAKM,qBACZ/B,mBAAoByB,KAAKQ,oCAG3B,kBAAC,EAAD,CAAcpB,QAAQ,4B,GAvCDqB,a,YCNjCC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.784b967f.chunk.js","sourcesContent":["import React from 'react';\n\nexport const Statistics = ({\n  good,\n  neutral,\n  bad,\n  total,\n  positivePercentage,\n}) => {\n  return (\n    <>\n      <p>Good: {good}</p>\n      <p>Neutral: {neutral}</p>\n      <p>Bad: {bad}</p>\n      <p>Total: {total}</p>\n      <p>\n        Positive Feedback: {isNaN(positivePercentage) ? 0 : positivePercentage}%\n      </p>\n    </>\n  );\n};\n","import React from 'react';\n\nexport const FeedbackOptions = ({ options, onLeaveFeedback }) =>\n  options.map(name => (\n    <button key={name} name={name} onClick={onLeaveFeedback}>\n      {name}\n    </button>\n  ));\n","import React from 'react';\n\nexport const Section = ({ title, children }) => {\n  return (\n    <>\n      <h1>{title}</h1>\n      {children}\n    </>\n  );\n};\n","import React from 'react';\n\nexport const Notification = message => <h2>{message.message}</h2>;\n","import React, { Component } from 'react';\nimport { Statistics } from './components/Statistics/Statistics';\nimport { FeedbackOptions } from './components/FeedbackOptions/FeedbackOptions';\nimport { Section } from './components/Section/Section';\nimport { Notification } from './components/Notification/Notification';\n\nconst initialState = {\n  good: 0,\n  neutral: 0,\n  bad: 0,\n};\n\nexport default class App extends Component {\n  state = { ...initialState };\n  addFeedback = e => {\n    e.persist();\n    this.setState(prevState => {\n      return { [e.target.name]: prevState[e.target.name] + 1 };\n    });\n  };\n\n  countTotalFeedback() {\n    return Object.values(this.state).reduce((acc, stat) => {\n      acc += stat;\n      return acc;\n    }, 0);\n  }\n\n  countPositiveFeedbackPercentage() {\n    return Math.round((this.state.good / this.countTotalFeedback()) * 100);\n  }\n\n  render() {\n    return (\n      <>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            options={Object.keys(this.state)}\n            onLeaveFeedback={this.addFeedback}\n          />\n        </Section>\n        <Section title=\"Statistics\">\n          {this.countTotalFeedback() > 0 ? (\n            <Statistics\n              good={this.state.good}\n              neutral={this.state.neutral}\n              bad={this.state.bad}\n              total={this.countTotalFeedback()}\n              positivePercentage={this.countPositiveFeedbackPercentage()}\n            />\n          ) : (\n            <Notification message=\"No feedback given\"></Notification>\n          )}\n        </Section>\n      </>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'modern-normalize/modern-normalize.css';\nimport './styles.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}